const { Telegraf, Scenes:  {BaseScene} } = require('telegraf')
require('dotenv').config();

const { BOT_TOKEN } = process.env;
const bot = new Telegraf(BOT_TOKEN)
const to = new BaseScene('to');
to.enter((ctx)=>{
    bot.telegram.sendMessage(ctx.chat.id, '–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞:',
    {
        reply_markup : {
            inline_keyboard: [
                [
                    { text: 'üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π', callback_data: 'us'},
                    { text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'ru'},
                ],
                [
                    { text: 'üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π', callback_data: 'uz'},
                    { text: 'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π', callback_data: 'zh'},
                ],
                [                     
                    { text: 'üá¶üá™ –ê—Ä–∞–±—Å–∫–∏–π', callback_data: 'ar'},
                    { text: 'üáπüá∑ –¢—É—Ä–µ—Ü–∫–∏–π', callback_data: 'tr'},
                ],
                [
                    { text: 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π', callback_data: 'uk'},
                    { text: 'üá∞üáø –ö–∞–∑–∞—Ö—Å–∫–∏–π', callback_data: 'kk'}
                ],
                [
                    { text: 'üáÆüá© –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π', callback_data: 'id'},
                    { text: 'üáÆüá∑ –ü–µ—Ä—Å–∏–¥—Å–∫–∏–π', callback_data: 'fa'},
                ],
                [                         
                    { text: 'üáπüáØ –¢–∞–¥–∂–∏–∫—Å–∫–∏–π', callback_data: 'tg'},
                    { text: 'üáµüá∞ –£—Ä–¥—É', callback_data: 'ur'},
                ],
                [
                    { text: 'üáÆüá≥ –•–∏–Ω–¥–∏', callback_data: 'hi'},
                    { text: 'üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', callback_data: 'fr'},
                ],
                [
                    { text: 'üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π', callback_data: 'de'},
                    { text: 'üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π', callback_data: 'ko'},
                ]
            ]
        }
    }
    )
})

to.action(['us', 'ru','uz', 'zh', 'ar','tr' ,'uk' ,'kk' ,'id' , 'fa','tg' ,'ur' ,'hi' ,'fr' ,'de' , 'ko' ], (ctx)=>{
    var langCode = ctx.match[0]
    switch(langCode){
        case 'us': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π')
            break
        case 'ru': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –†—É—Å—Å–∫–∏–π')
            break
        case 'uz': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –£–∑–±–µ–∫—Å–∫–∏–π')
            break
        case 'zh': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –ö–∏—Ç–∞–π—Å–∫–∏–π')
            break
        case 'ar': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –ê—Ä–∞–±—Å–∫–∏–π')
            break
        case 'tr': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –¢—É—Ä–µ—Ü–∫–∏–π')
            break
        case 'uk': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π')
            break
        case 'kk': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –ö–∞–∑–∞—Ö—Å–∫–∏–π')
            break
        case 'id': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π')
            break
        case 'fa': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –ü–µ—Ä—Å–∏–¥—Å–∫–∏–π')
            break
        case 'tg': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –¢–∞–¥–∂–∏–∫—Å–∫–∏–π')
            break
        case 'ur': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –£—Ä–¥—É')
            break
        case 'hi': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –•–∏–Ω–¥–∏')
            break
        case 'fr': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π')
            break
        case 'de': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –ù–µ–º–µ—Ü–∫–∏–π')
            break
        case 'ko': 
            ctx.reply('–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞ - –ö–æ—Ä–µ–π—Å–∫–∏–π')
            break
        
    }
    return ctx.scene.leave()
})

module.exports = to